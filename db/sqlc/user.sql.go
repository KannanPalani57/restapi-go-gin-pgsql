// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
  email,
  full_name,
  password, 
  email_verified
) VALUES (
  $1, $2, $3, $4
) RETURNING id, email, full_name, password, email_verified, created_at
`

type CreateUserParams struct {
	Email         pgtype.Text `json:"email"`
	FullName      pgtype.Text `json:"full_name"`
	Password      pgtype.Text `json:"password"`
	EmailVerified pgtype.Text `json:"email_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.FullName,
		arg.Password,
		arg.EmailVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Password,
		&i.EmailVerified,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, full_name, password, email_verified, created_at FROM "user"
WHERE full_name = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, fullName pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUser, fullName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.Password,
		&i.EmailVerified,
		&i.CreatedAt,
	)
	return i, err
}
